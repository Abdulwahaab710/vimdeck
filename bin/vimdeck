#!/usr/bin/env ruby
#> Usage: vimdeck [<command>] [<file>]
#>
#> Commands:
#>
#>   slideshow          generate and show slides (default)
#>   generate           generate slides only
#>   open               open slides in presentation folder (no file needed)
#>
#> Options:
#>
#>   --no-indent, -I    skip indentation
#>   --no-ascii, -A     skip ascii headers
#>   --header-font, -h  specify header font (http://www.figlet.org/fontdb.cgi)
#>                      foregoes the ability to have small and large headers

require "optparse"
require "vimdeck"
# require_relative File.dirname(__FILE__)+"/../../lib/vimdeck.rb"

def usage
  File.read(__FILE__).split("\n").grep(/^#>/).each do |line|
    puts line[3..-1]
  end
end

def check_file(file, opt_parser)
  if !file || !File.exists?(file)
    usage
    puts "\nFile does not exist! #{file}"
    exit 0
  end
end

options = {}

opt_parser = OptionParser.new do |opt|
  opt.on("-A", "--no-ascii") do
    options[:no_ascii] = true
  end

  opt.on("-I", "--no-indent") do
    options[:no_indent] = true
  end

  opt.on("-h", "--header-font STRING", String) do |opt|
    options[:header_font] = opt
  end
end

opt_parser.parse!

file = ARGV.length > 1 ? ARGV[1] : ARGV[0]

if !ARGV[0]
  usage
  exit 0
end

if ARGV[0] && ARGV[0] != "open"
  check_file(file, opt_parser)
end

case ARGV[0]
when "slideshow"
  Vimdeck::Slideshow.start(file, options)
when "generate"
  Vimdeck::Slideshow.generate(file, options)
when "open"
  if ARGV.length == 2
    puts "Vimdeck will open already existing slides"
    puts "File name will be ignored"
    sleep 3
  end

  Vimdeck::Slideshow.open
else
  Vimdeck::Slideshow.start(file, options)
end
